物品实体大小：0.25³=4px³

大部分物品实体生成位置都在发生事件的位置(比如死亡生物的坐标)
初始初始速度(函数名：ItemEntity)：(-0.1~+0.1, 0.2, -0.1~+0.1)，单位m/gt.

少部分初始位置是随机的，比如容器实体掉落物品(dropItemStack)，方块掉落物品(popResource)，方块从某个面掉落物品(popResourceFromFace)，可以杯刷的方块实体(BrushableBlockEntity)
售部分初始位置是一个确定的位置，比如剪南瓜
售部分初始速度不使用上述的随机速度，比如“默认的发射器行为(DefaultDispenseItemBehavior)”




方块被破坏掉落物产生(方块挖掘，活塞推盒子等)：
(函数名：popResource)
1.16-的：
生成的物品实体的所有初始位置落点的范围是{(4,4,4),(12,12,12)},位于水平中心，垂直距离底部2px处，8x8x8的范围
生成的物品实体的所有初始位置的碰撞箱的并集是{(2,2,2),(14,14,14)}，区域顶部贴着方块顶部，12x12x12的范围。
1.17+的：
生成的物品实体的所有初始坐标落点的范围是{(4,2,4),(12,10,12)},位于水平中心，垂直距离底部2px处，8x8x8的范围
生成的物品实体的所有初始位置的碰撞箱的并集是{(2,2,2),(14,14,14)}，区域中心位于方块中心，12x12x12的范围。
1.17变化前后对比：
实际上就是实体生成时的y坐标更新之后多了个“减半个物品实体高度(下移2px)”

掉落物初始速度：(-0.1~+0.1, 0.2, -0.1~+0.1)，单位m/gt.
垂直高度问题：
由于生成后竖直方向速度恒为0.2，实测经过4次运算达到抛物线顶点，最多跳起高度：0.38423872m≈6.14781952px
实际场景理论最大高度：1.00923872m≈1m+0.14781952px，可跳到旁边完整方块上表面，但是上面盖个1px厚的地毯就不可能跳跃上去了。

生成初始位置较高，一次运算就能使物品实体的头顶进入上方方块的范围(概率为0.07，最多露头0.035m)，一位置活塞侧推打盒，如果上方是个嘴朝下的漏斗，有概率因为被漏斗嘴磕头而丢盒子，其概率大概是亿分之一。
水平范围问题：
周围无阻挡，物品实体可以飞到平面上3x3的边界上，踏入5x5范围一点点。
投掷器喷细雪：
	向下方：大多数碰撞箱可触及范围是中心10x10px（剩余3px），极少数能触及12x12px(剩余2px，卡在打开的活板门边缘)
	向侧面：同上，但是投掷方向可侵入第二个方块2px，背对投掷器方向距离边缘剩余4px

上推打盒，若活塞在第0gt破坏盒子，考虑最极端生成初始位置和最巧合的初始速度的情况：
若不封顶(上方是漏斗或空气等)，对应极端情况为盒子初始高度为最大值，发射器最早可在第13gt喷盒；
若封顶(上方是发射器、完整方块等)，对应极端情况为盒子初始高度为~-0.135(命令方块生成y值)，发射器最早可在第12gt喷盒。

容器破坏产生掉落物的每个实体的数量：
(函数名Containers/dropItemStack)
对容器的一个格子的反复取出物品，每次取出10~30个物品(代码10+r(21))生成一个掉落物实体，一直取尽这个格子，再去处理下个格子。
现象：一个装着27组物品的箱子，被拆掉之后会掉落超过27个物品实体，因为最后有无法合并的实体。

容器破坏产生掉落物(烧盒子、烧矿车、拆箱子等)：
(函数名dropContents\dropItemStack)
掉落物所有可能的位置的碰撞箱取并集得到的形状是，水平四个方向表面都收缩2个像素的长方体，即范围是12x16x12的长方体范围，长方体范围的的中心在对应方块的中心，掉落物初始速度(△c, 0.2+△c, △c), c=0.11485000171139836，，单位m/gt.


方块在某个面产生掉落物(目前仅有缠根泥土被锄头对着某个面锄的时候触发)
(函数名popResourceFromFace)
实体生成时恰好碰撞箱紧贴方块的那个面，所有位置的碰撞箱并集是12x12的区域，区域在那个面的中心。(法向4px，水平方向12px²)


剪南瓜(特殊代码)：
实体位置在南瓜雕刻面的水平中心，距离为南瓜被雕刻的表面0.15=2.4px，垂直距离距离雕刻方形的那个方块底面向上0.1m=1.6px。此时南瓜和掉落物中间的间隙为0.15m-0.125m=0.025m=0.4px.

投掷器投掷实体的位置：
从投掷器(x,y,z)中心坐标(x+0.5,y+0.5,z+0.5)，沿投掷方向平移0.2
水平投掷：竖直方向再-5/32(0.15625)，此时实体坐标为x,z: 0.5 ± 0.2 ; y+0.34375 ( y + 5.5/16 )
向上投掷：竖直方向再-4/32(0.125  )，此时实体坐标为x,z: 0.5 ± 0.2 ; y+0.075 ( y + 1.2/16 )
向下投掷：竖直方向再-4/32(0.125  )，此时实体坐标为x,z: 0.5 ± 0.2 ; (y-1)+0.675 ( y-1 + 10.8/16 )
现象：
水平投掷出的物品y值的小数为0.34375=5.5px，投掷面法线方向上物品实体和投掷器的间隙为0.075,=1.2px，投掷面左右平行方向上物品位于表面中心。
垂直投掷器，投掷面法线方向上物品实体和投掷器的间隙为0.075=1.2px，水平方向上位于表面中心。


物品实体合并逻辑：物品实体在tick时，寻找范围内的合法物品实体，进行合并
涉及到的顺序：
- 物品实体在tick时：实体运算顺序，即实体加入到世界中的顺序
- 寻找范围内的合法物品实体：区段相对位置的顺序。同区段则为实体加入到区段内的顺序


mod4条件
if (!this.onGround() || this.getDeltaMovement().horizontalDistanceSqr() > 1.0E-5F || (this.tickCount + this.getId()) % 4 == 0)
then tick
翻译：落地&水平速度慢=平均每4t只有其中一个tick会运算


jumpFactor 默认(1.0) 蜜块(0.5)
speedFactor 默认(1.0) 蜜块(0.4)，灵魂沙(0.4)
friction 默认(0.6) 粘液块(0.8)，冰、浮冰、霜冰(0.98)，蓝冰(0.989)		


物品实体编号相关：
this.getId：物品实体的编号(针对每所有实体，从0开始自增)
this.tickCount 存在时间(gt)
mod4被除数：(this.getId + this.tickCount)


实体合并

当实体坐标发生整数级别的变化的时候(跨方块)，i=2；没有整数级别的变化时，i=40。
当实体的存在时间(this.tickCount)能整除i的时候，发起合并尝试。
发起合并尝试的时候，按实体碰撞箱水平四个方向膨胀0.5m之后检查有没有交集的实体
对于每一个实体检测是否满足合并条件(是否相同，合并之后数量不超过64)
满足合并条件之后，比较数量：自己数量大于或等于对方数量时，合并到自己身上；自己数量小于对方数量的时候，合并到对方身上。
合并后的age去最小值，捡起延时去最大值。

捡起延时：较大值(捡起延时更长)
age：较小值(存活时间更长)

换盒稳定性问题：
https://discord.com/channels/748542142347083868/1191862285208137758/1226105931641651232



