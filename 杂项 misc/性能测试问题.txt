1. mc很多卡顿是非线性增加的，例如实体越多，实体之间的互动就越多，例如大量的漏斗矿车在一起会因为互相吸取而造成卡顿增长速度越来越快。不只是实体，很多红石原件也存在这类问题，而且不同红石原件的卡顿增速曲线往往也是不一样的，所以你不能测试100个某原件的mspt为5，那么1000个就是50mspt；
2. 经实测发现，不同的硬件项目擅长不同的性能测试项目，有些测试项目在有些CPU上测得的数据偏高或偏低，其中超级漏斗存在这种现象较为明显，目前推测可能和内存或其他带宽有关，但是分析这个很困难只局限于猜测阶段；
3. 对于一个什么机器都还没有开启的服务器，大部分卡顿来自于随机刻和刷怪计算，然后carpet的假人有bug，用命令方块自动召唤假人容易召唤失败或着卡死，导致这个测试难以进行；
4. 如果某些测试项目未能使服务端掉刻，那么会存在“虚mspt”的情况，比如虚空超平坦世界有的服务器上来就5mspt，但是一旦twarp只有零点几，这是服务端或硬件摸鱼的情况，而近期发现mc的服务端也会在未掉刻的有闲置计算资源的时间进行一些无用操作，例如保存POI到硬盘，这也会导致mspt虚高。





https://www.bilibili.com/video/av113708118381826/
居然在这里看到了那个MC的性能测试，做这个东西的时候其实比较早(2023年)，所以是1.20.1+java17的测试环境测试，虽然新版本漏斗因为一些修改的卡顿下降了几乎5倍，但是不同处理的相对差距依然是有价值的，说几个mc性能测试的发现：

1. ​不同发布者的java只要版本相同，没有性能差距。我测试过微软的、亚马逊的、开源的Adoptium的OpenJDK，还有zulu的都没有差距。

2. ​不同版本的java有较大的性能差距，例如jdk21的性能比jdk17性能高了约10%左右，jdk22又比jdk21强10%左右，这也是为什么视频里面用了jdk21比jdk17能让mspt下降的原因，而不是“微软的优化的”原因，目前的说法是不同的jdk对内存回收的影响较大。

3.社区里认为azul的zulu jdk能让高版本(使用jdk17及以上的mc版本，实际上1.14就可以用)的mc在更少的内存分配下达到相同的运行性能或能跑起来，多个评论区都有说换了zulu就可以在内存不够用的情况下活的更流畅的体验，这个不好测试，但是经过我的测试，内存够用的正常情况下性能是没有差距的。低版本又有阿里的dragonwell8(java8)适合1.12及以下的版本，这个也是广为流传但未经验证的说法。

4. 有的时候游戏崩溃是Java虚拟机崩溃了(会产生hs_err_pid.log文件)，如果是随机的崩溃，很多时后不一定是mod或着游戏的问题，有可能是硬件的损坏，今年的暑假比较炎热，我发现了三例都是jvm报错，经过看报错日志(一般人看看不懂，扔给大模型ai就行)，然后最后用memTest64跑压力测试发现是内存条出问题。最开始本人我遇到这个问题反反复复查找mod、游戏和windows系统出问题的可能性，最后学了一点点jvm报错的知识，配合ai的解释，认定为内存有问题，最后给内存跑压力测试确定为内存有问题，最后把内存的电压加压了0.05V解决问题，其余的两人也通过换内存或其他方式解决了问题。