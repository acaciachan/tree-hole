MC最基础的两个时间：互相独立
	gametime：游戏时间
		只能使用“/tick”命令控制，不能随意指定数值，也不能减小
		只能随着时间流逝慢慢增大，“/tick”命令能控制流速
		决定着游戏里的各种计划刻、方块事件、实体、方块实体等几乎所有的游戏机制的时刻

	dayTime：天空时间
		使用“/time query daytime”获取天空时间
		使用“/time set/add”命令控制，可以随便改数值
		使用“/gamerule doDaylightCycle”控制流逝或停止
		决定游戏内的天空等表象的时间，影响村民工作、天空亮度、天气、阳光感应板等表象的时间
		数值流逝会越来越大，每经过 24000tick=20min 恰好是mc的一个昼夜循环
		例如dayTime=100000(即4*24000+4000)实际上就是第四天的第4000tick
		fixed_time：某些维度天空时间是固定的，下界为18000(午夜)，末地为6000(正午)

MC由以上两个基础时间引出的时间相关参数：
	day：第几天
		day = dayTime\24000 (整除)
		使用“/time query day”获取这是“第几天”
		
	timeOnThisDay：当天的时刻(从清晨为0开始)(玩家常说的一天中的时间是这个)
		timeOnThisDay = dayTime % 24000 (求余数)
		表示每天所处的时刻，0=清晨，6000=正午，12000=傍晚，18000=午夜

	timeOfDay：当天的时刻(从正午为0开始)(代码里常用的是这个)
		源代码简化为python代码：
		def timeOfDay(t):
			d = (t / 24000.0 - 0.25) % 1.0  # 取小数部分
			e = 0.5 - numpy.cos(d * numpy.pi) / 2.0
			return (d * 2.0 + e) / 3.0
		
		画图后分析：
			1.	这是个周期函数，周期正好为 1MC日=24000tick，每个周期内，函数值“近似线性”的从0增加到1，值域是[0,1)
			2.	可近似为以下式子：timeOfDay(t) = ((dayTime-6000)%24000)/24000
			3.	总结：每天正午时从0开始近似线性增长，直到第二天正午的前一刻无限接近于1，到达第二天正午又变成0，进入下一轮循环
	
	sunAngle：太阳角度
		sunAngle = 2π * timeOfDay
		
	MoonPhase：月相(主要用于计算月光率)
		MoonPhase = ((dayTime\24000)% 8 + 8) % 8 (+8%8的部分防止出现负数)
			= (dayTime\24000)% 8 (一般情况下，dayTime没有溢出变成负数的话 dayTime >= 0)
			= day % 8
		结论：第 n+0 ~ n+7 天时(n>=0)，月相值为 0~7
		
	MoonBrightness：月光率
		当月相分别为0~7时，月光率分别为{1.0, 0.75, 0.5, 0.25, 0.0, 0.25, 0.5, 0.75}
		月相		月光率	月相名称
		0		1		满月
		1		0.75	亏凸月
		2		0.5		下弦月
		3		0.25	残月
		4		0		新月
		5		0.25	娥眉月
		6		0.5		上弦月
		7		0.75	盈凸月

	
	
	
